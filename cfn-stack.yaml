AWSTemplateFormatVersion: '2010-09-09'
Description: 'The AWS CloudFormation template for this Serverless application'
Resources:
    ServerlessDeploymentBucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - {ServerSideEncryptionByDefault: {SSEAlgorithm: AES256}}
    ServerlessDeploymentBucketPolicy:
        Type: 'AWS::S3::BucketPolicy'
        Properties:
            Bucket:
                Ref: ServerlessDeploymentBucket
            PolicyDocument:
                Statement:
                    - {Action: 's3:*', Effect: Deny, Principal: '*', Resource: [{'Fn::Join': ["", ['arn:', {Ref: 'AWS::Partition'}, ':s3:::', {Ref: ServerlessDeploymentBucket}, '*']]}], Condition: {Bool: {'aws:SecureTransport': false}}}
    TodosLogGroup:
        Type: 'AWS::Logs::LogGroup'
        Properties:
            LogGroupName: /aws/lambda/sample-alb-lambda-app-dev-todos
    IamRoleLambdaExecution:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - {Effect: Allow, Principal: {Service: [lambda.amazonaws.com]}, Action: ['sts:AssumeRole']}
            Policies:
                -
                    PolicyName: {'Fn::Join': ['-', [sample-alb-lambda-app-dev, lambda]]}
                    PolicyDocument: {Version: '2012-10-17', Statement: [{Effect: Allow, Action: ['logs:CreateLogStream', 'logs:CreateLogGroup'], Resource: [{'Fn::Sub': 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sample-alb-lambda-app-dev*:*'}]}, {Effect: Allow, Action: ['logs:PutLogEvents'], Resource: [{'Fn::Sub': 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sample-alb-lambda-app-dev*:*:*'}]}]}
            Path: /
            RoleName:
                'Fn::Join':
                    - '-'
                    - [sample-alb-lambda-app-dev, {Ref: 'AWS::Region'}, lambdaRole]
    TodosLambdaFunction:
        Type: 'AWS::Lambda::Function'
        Properties:
            Code:
                S3Bucket:
                    Ref: ServerlessDeploymentBucket
                S3Key: 'serverless/sample-alb-lambda-app/dev/1593166247708-2020-06-26T10:10:47.708Z/sample-alb-lambda-app.zip'
            FunctionName: sample-alb-lambda-app-dev-todos
            Handler: src/lambda/http/getTodos.handler
            MemorySize: 1024
            Role:
                'Fn::GetAtt':
                    - IamRoleLambdaExecution
                    - Arn
            Runtime: nodejs12.x
            Timeout: 6
            Environment:
                Variables:
                    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        DependsOn:
            - TodosLogGroup
            - IamRoleLambdaExecution
    TodosLambdaVersion4ihRlyo6tWxlokMcV7namBmSlrCYbLz7Ez3JWSdrSg:
        Type: 'AWS::Lambda::Version'
        DeletionPolicy: Retain
        Properties:
            FunctionName:
                Ref: TodosLambdaFunction
            CodeSha256: hcTUNI+/yQYf4SOZt750JwLB76WBplxHO8RW8mPYbjY=
    TodosAlbTargetGroupListener:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            TargetType: lambda
            Targets:
                -
                    Id: {'Fn::GetAtt': [TodosLambdaFunction, Arn]}
            Name: 099fb2e28820ee6541ad950d48a0d5af
            Tags:
                -
                    Key: Name
                    Value: sample-alb-lambda-app-todos-Listener-dev
            TargetGroupAttributes:
                -
                    Key: lambda.multi_value_headers.enabled
                    Value: false
        DependsOn:
            - TodosLambdaPermissionRegisterTarget
    TodosAlbListenerRule1:
        Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
        Properties:
            Actions:
                -
                    Type: forward
                    TargetGroupArn: {Ref: TodosAlbTargetGroupListener}
            Conditions:
                -
                    Field: path-pattern
                    Values: ['/todos/'*']
                -
                    Field: http-request-method
                    HttpRequestMethodConfig: {Values: [GET]}
            ListenerArn:
                Ref: Listener
            Priority: 1
    TodosLambdaPermissionAlb:
        Type: 'AWS::Lambda::Permission'
        Properties:
            FunctionName:
                'Fn::GetAtt':
                    - TodosLambdaFunction
                    - Arn
            Action: 'lambda:InvokeFunction'
            Principal: elasticloadbalancing.amazonaws.com
            SourceArn:
                Ref: TodosAlbTargetGroupListener
    TodosLambdaPermissionRegisterTarget:
        Type: 'AWS::Lambda::Permission'
        Properties:
            FunctionName:
                'Fn::GetAtt':
                    - TodosLambdaFunction
                    - Arn
            Action: 'lambda:InvokeFunction'
            Principal: elasticloadbalancing.amazonaws.com
    SecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            Name: test-grp-dev
            GroupDescription: test-grp
            SecurityGroupIngress:
                -
                    IpProtocol: tcp
                    Cidr: 11.0.0.0/9
                    FromPort: 80
                    ToPort: 80
                -
                    IpProtocol: tcp
                    Cidr: 12.0.0.0/9
                    FromPort: 80
                    ToPort: 80
            VpcId: vpc-22434
    LoadBalancer:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            Name: test-alb-dev
            SecurityGroups:
                -
                    Ref: SecurityGroup
            Schema: internal
            Subnets:
                - subnet-1
                - subnet-2
    TargetGroup:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            Name: test-alb-tg-dev
            HealthCheckEnabled: false
            TargetType: lambda
            Targets:
                Id: 'arn:aws:lambda:us-east-1:24242424:funtion:test-lambda'
    Listener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                -
                    Order: 1
                    TargetGroupArn: {Ref: TargetGroup}
                    Type: forward
            LoadBalancerArn:
                Ref: LoadBalancer
            Port: 80
            Protocol: HTTP
Outputs:
    ServerlessDeploymentBucketName:
        Value:
            Ref: ServerlessDeploymentBucket
    TodosLambdaFunctionQualifiedArn:
        Description: 'Current Lambda function version'
        Value:
            Ref: TodosLambdaVersion4ihRlyo6tWxlokMcV7namBmSlrCYbLz7Ez3JWSdrSg
    AwsDocApiId:
        Description: 'API ID'
        Value:
            Ref: ApiGatewayRestApi
